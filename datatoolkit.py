# -*- coding: utf-8 -*-
"""datatoolkit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZR2GriRX7trDWK3B-g9o-qDK7McDMUqX
"""



"""### 1. **What is NumPy, and why is it widely used in Python?**

NumPy (Numerical Python) is a powerful Python library for numerical computing. It provides support for large, multi-dimensional arrays and matrices along with a collection of mathematical functions to operate on them efficiently. It's widely used because it's fast (written in C), memory efficient, and supports broadcasting and vectorized operations.

---

### 2. **How does broadcasting work in NumPy?**

Broadcasting allows NumPy to perform arithmetic operations on arrays of different shapes by "stretching" the smaller array to match the shape of the larger one without copying data. For example:

```python
a = np.array([1, 2, 3])
b = 2
print(a + b)  # [3 4 5]
```

---

### 3. **What is a Pandas DataFrame?**

A DataFrame is a 2-dimensional, labeled data structure in Pandas similar to an Excel spreadsheet or SQL table. It can hold data of different types (e.g., integers, strings, floats) in columns.

---

### 4. **Explain the use of the `groupby()` method in Pandas.**

The `groupby()` method splits the data into groups based on some criteria (e.g., a column), applies a function (like sum, mean, count), and then combines the results. It's used for aggregation and analysis.

```python
df.groupby('department')['salary'].mean()
```

---

### 5. **Why is Seaborn preferred for statistical visualizations?**

Seaborn provides beautiful and informative statistical graphics with simpler syntax than Matplotlib. It has built-in themes, color palettes, and functions for common tasks like boxplots, violin plots, and regression plots.

---

### 6. **Differences Between NumPy Arrays and Python Lists**

| Feature      | NumPy Array            | Python List   |
| ------------ | ---------------------- | ------------- |
| Performance  | Faster (C-based)       | Slower        |
| Data Type    | Homogeneous            | Heterogeneous |
| Operations   | Element-wise supported | Not supported |
| Memory Usage | Less                   | More          |

---

### 7. **What is a heatmap, and when should it be used?**

A heatmap is a graphical representation of data where individual values are represented as colors. It's useful for showing correlations, missing data, or frequency in matrices or tables.

---

### 8. **What does the term “vectorized operation” mean in NumPy?**

A vectorized operation allows you to perform operations on whole arrays without using explicit loops, making the code cleaner and much faster.

```python
a = np.array([1, 2, 3])
print(a * 2)  # Vectorized multiplication
```

---

### 9. **How does Matplotlib differ from Plotly?**

| Feature    | Matplotlib         | Plotly                |
| ---------- | ------------------ | --------------------- |
| Type       | Static             | Interactive           |
| Complexity | More coding needed | Easier with templates |
| Use Case   | Publications       | Dashboards, Web Apps  |

---

### 10. **Significance of Hierarchical Indexing in Pandas**

Hierarchical indexing (MultiIndex) allows you to have multiple index levels (e.g., Year and Month) on a DataFrame, which helps with complex data organization and retrieval.

---

### 11. **What is the role of Seaborn’s `pairplot()` function?**

`pairplot()` visualizes pairwise relationships in a dataset. It plots scatter plots for numerical features and histograms on the diagonal. It’s helpful for identifying correlations and patterns.

---

### 12. **Purpose of the `describe()` function in Pandas**

`describe()` provides summary statistics of numerical columns, including count, mean, std, min, 25%, 50%, 75%, and max values. It’s useful for quick data exploration.

---

### 13. **Why is handling missing data important in Pandas?**

Missing data can skew analysis or cause errors in computations. Handling it (filling, dropping, or imputing) ensures data quality and accuracy in models.

---

### 14. **Benefits of Using Plotly for Data Visualization**

* Interactive and dynamic plots
* Built-in support for 3D and time-series
* Can be integrated into web dashboards (e.g., Dash)
* Aesthetically pleasing default styles

---

### 15. **How does NumPy handle multidimensional arrays?**

NumPy uses the `ndarray` object to represent multidimensional arrays. It provides attributes like `.shape`, `.ndim`, and methods for reshaping, slicing, and broadcasting across dimensions.

---

### 16. **What is the role of Bokeh in data visualization?**

Bokeh is a Python library for creating interactive visualizations for web browsers. It's used to build dashboards and supports streaming and real-time data.

---

### 17. **Difference Between `apply()` and `map()` in Pandas**

| Method    | Applies To       | Purpose                         |
| --------- | ---------------- | ------------------------------- |
| `map()`   | Series           | Element-wise transformation     |
| `apply()` | Series/DataFrame | Row/column-wise or element-wise |

---

### 18. **Advanced Features of NumPy**

* Linear algebra operations
* Fourier transforms
* Random number generation
* Broadcasting and universal functions (ufuncs)
* Memory-mapped arrays

---

### 19. **How Does Pandas Simplify Time Series Analysis?**

Pandas has built-in support for datetime indexing, resampling, time-shifting, and window functions, making time series manipulation intuitive and efficient.

---

### 20. **What is the Role of a Pivot Table in Pandas?**

A pivot table summarizes data by transforming or aggregating it over multiple dimensions (e.g., rows and columns), similar to Excel pivot tables.

```python
df.pivot_table(values='sales', index='region', columns='month', aggfunc='sum')
```

---

### 21. **Why is NumPy’s array slicing faster than Python’s list slicing?**

NumPy arrays are stored in contiguous memory and use low-level optimizations in C. Python lists are arrays of pointers and involve more overhead during slicing.

---

### 22. **Common Use Cases for Seaborn**

* Distribution plots (histograms, KDE)
* Correlation heatmaps
* Boxplots for categorical analysis
* Pairplots for multivariate analysis
* Regression visualizations

### 🔹 **1. Create a 2D NumPy array and calculate the sum of each row**

```python
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
row_sums = np.sum(arr, axis=1)
print("Row sums:", row_sums)
```

---

### 🔹 **2. Find the mean of a specific column in a Pandas DataFrame**

```python
import pandas as pd

df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
mean_b = df['B'].mean()
print("Mean of column B:", mean_b)
```

---

### 🔹 **3. Create a scatter plot using Matplotlib**

```python
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y = [10, 20, 25, 30]

plt.scatter(x, y)
plt.title("Scatter Plot")
plt.xlabel("X")
plt.ylabel("Y")
plt.show()
```

---

### 🔹 **4. Calculate a correlation matrix using Seaborn and visualize it with a heatmap**

```python
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame({
    'A': [1, 2, 3, 4],
    'B': [10, 20, 30, 40],
    'C': [5, 10, 15, 20]
})
corr = df.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix Heatmap")
plt.show()
```

---

### 🔹 **5. Generate a bar plot using Plotly**

```python
import plotly.express as px
import pandas as pd

df = pd.DataFrame({'Fruit': ['Apples', 'Bananas', 'Cherries'], 'Amount': [10, 15, 7]})
fig = px.bar(df, x='Fruit', y='Amount', title="Fruit Count")
fig.show()
```

---

### 🔹 **6. Create a DataFrame and add a new column based on an existing column**

```python
import pandas as pd

df = pd.DataFrame({'price': [100, 200, 300]})
df['discounted_price'] = df['price'] * 0.9
print(df)
```

---

### 🔹 **7. Element-wise multiplication of two NumPy arrays**

```python
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
result = a * b
print("Element-wise multiplication:", result)
```

---

### 🔹 **8. Create a line plot with multiple lines using Matplotlib**

```python
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y1 = [10, 20, 30, 40]
y2 = [5, 15, 25, 35]

plt.plot(x, y1, label='Line 1')
plt.plot(x, y2, label='Line 2')
plt.legend()
plt.title("Multiple Lines")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.show()
```

---

### 🔹 **9. Filter rows where a column value is greater than a threshold in Pandas**

```python
import pandas as pd

df = pd.DataFrame({'score': [50, 85, 60, 95]})
filtered_df = df[df['score'] > 80]
print(filtered_df)
```

---

### 🔹 **10. Create a histogram using Seaborn to visualize a distribution**

```python
import seaborn as sns
import matplotlib.pyplot as plt

data = [10, 20, 20, 30, 40, 50, 60]
sns.histplot(data, bins=5, kde=True)
plt.title("Distribution Histogram")
plt.show()
```

---

### 🔹 **11. Perform matrix multiplication using NumPy**

```python
import numpy as np

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])
result = np.dot(a, b)
print("Matrix multiplication result:\n", result)
```

---

### 🔹 **12. Load a CSV file and display its first 5 rows using Pandas**

```python
import pandas as pd

df = pd.read_csv("your_file.csv")
print(df.head())
```

> Replace `"your_file.csv"` with the actual path to your CSV file.

---

### 🔹 **13. Create a 3D scatter plot using Plotly**

```python
import plotly.express as px
import pandas as pd

df = pd.DataFrame({
    'x': [1, 2, 3, 4],
    'y': [10, 20, 30, 40],
    'z': [5, 15, 25, 35]
})
fig = px.scatter_3d(df, x='x', y='y', z='z', title="3D Scatter Plot")
fig.show()
```
"""