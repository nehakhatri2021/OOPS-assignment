# -*- coding: utf-8 -*-
"""pythonbasics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lBfF1ZxlGAlA_wh0oB2FhcqItk5hpTEN

### **1. Explain the key features of Python that make it a popular choice for programming**

* **Simple & Easy to Learn**: Python has a clean and readable syntax similar to English.
* **Interpreted Language**: Code is executed line by line, which makes debugging easier.
* **Dynamically Typed**: You don’t need to declare variable types.
* **Extensive Libraries**: Offers built-in and third-party libraries for everything from web development to machine learning.
* **Portable**: Runs on Windows, macOS, Linux, etc. without changing code.
* **Open Source**: Freely available and supported by a huge community.
* **Object-Oriented & Functional**: Supports both paradigms.

---

### **2. Describe the role of predefined keywords in Python and provide examples of how they are used in a program**

* **Keywords** are reserved words in Python that have special meaning.
* They **cannot** be used as variable names.

**Examples of keywords**: `if`, `else`, `for`, `while`, `def`, `class`, `return`, `True`, `False`, `None`

```python
if True:
    print("This is an example of using the 'if' keyword")
```

```python
def greet():
    return "Hello"  # 'def' and 'return' are keywords
```

Use `import keyword; print(keyword.kwlist)` to see all keywords.

---

### **3. Compare and contrast mutable and immutable objects in Python with examples**

| Feature     | Mutable               | Immutable                      |
| ----------- | --------------------- | ------------------------------ |
| Can change? | Yes                   | No                             |
| Examples    | `list`, `dict`, `set` | `int`, `float`, `str`, `tuple` |

**Mutable Example:**

```python
my_list = [1, 2, 3]
my_list[0] = 100
print(my_list)  # [100, 2, 3]
```

**Immutable Example:**

```python
my_str = "hello"
# my_str[0] = 'H'  # Error: strings are immutable
new_str = my_str.replace("h", "H")
print(new_str)  # Hello
```

---

### **4. Discuss the different types of operators in Python and provide examples of how they are used**

1. **Arithmetic Operators**: `+`, `-`, `*`, `/`, `//`, `%`, `**`

   ```python
   print(10 + 5, 10 ** 2)
   ```

2. **Comparison Operators**: `==`, `!=`, `>`, `<`, `>=`, `<=`

   ```python
   print(5 > 2)  # True
   ```

3. **Logical Operators**: `and`, `or`, `not`

   ```python
   print(True and False)  # False
   ```

4. **Assignment Operators**: `=`, `+=`, `-=`, `*=`, etc.

   ```python
   x = 5
   x += 3
   print(x)  # 8
   ```

5. **Bitwise Operators**: `&`, `|`, `^`, `~`, `<<`, `>>`

6. **Membership Operators**: `in`, `not in`

   ```python
   print("a" in "apple")  # True
   ```

7. **Identity Operators**: `is`, `is not`

   ```python
   a = b = [1, 2]
   print(a is b)  # True
   ```

---

### **5. Explain the concept of type casting in Python with examples**

**Type casting** is converting one data type to another.

**Examples:**

```python
# int to float
x = 5
print(float(x))  # 5.0

# string to int
s = "123"
print(int(s))  # 123

# int to string
n = 100
print(str(n))  # '100'
```

**Invalid conversion:**

```python
s = "abc"
# print(int(s))  # Error
```

---

### **6. How do conditional statements work in Python? Illustrate with examples**

Conditional statements control the flow of execution based on conditions.

**Example:**

```python
x = 10
if x > 0:
    print("Positive")
elif x == 0:
    print("Zero")
else:
    print("Negative")
```

**Syntax:**

* `if condition:`
* `elif condition:`
* `else:`

---

### **7. Describe the different types of loops in Python and their use cases with examples**

1. **For loop** – Used when the number of iterations is known or iterable is provided.

```python
for i in range(5):
    print(i)
```

2. **While loop** – Used when condition is checked each time before executing.

```python
x = 0
while x < 5:
    print(x)
    x += 1
```

3. **Nested loops** – Loop inside another loop.

```python
for i in range(2):
    for j in range(2):
        print(i, j)
```

4. **Loop control statements**:

   * `break` – Exit the loop.
   * `continue` – Skip the current iteration.
   * `pass` – Do nothing.

```python
for i in range(5):
    if i == 3:
        break
    print(i)
```
"""