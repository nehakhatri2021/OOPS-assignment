# -*- coding: utf-8 -*-
"""DSApython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QA-tHm5WHExL2_MckIvJDNRofPISAppx

## **String Problems**

### 1. Reverse a string

```python
def reverse_string(s):
    return s[::-1]
```

### 2. Count vowels in a string

```python
def count_vowels(s):
    return sum(1 for ch in s.lower() if ch in 'aeiou')
```

### 3. Check palindrome

```python
def is_palindrome(s):
    return s == s[::-1]
```

### 4. Check anagrams

```python
def are_anagrams(s1, s2):
    return sorted(s1) == sorted(s2)
```

### 5. Find all occurrences of a substring

```python
def find_all_occurrences(text, sub):
    return [i for i in range(len(text)) if text.startswith(sub, i)]
```

### 6. String compression

```python
def compress_string(s):
    result = ''
    i = 0
    while i < len(s):
        count = 1
        while i+1 < len(s) and s[i] == s[i+1]:
            count += 1
            i += 1
        result += s[i] + str(count)
        i += 1
    return result
```

### 7. Check for unique characters

```python
def has_unique_chars(s):
    return len(set(s)) == len(s)
```

### 8. Convert to upper/lower

```python
def convert_case(s):
    return s.upper(), s.lower()
```

### 9. Count words

```python
def count_words(s):
    return len(s.split())
```

### 10. Concatenate strings without `+`

```python
def concat_strings(s1, s2):
    return "{}{}".format(s1, s2)
```

---

## **List Problems**

### 11. Remove specific element

```python
def remove_element(lst, target):
    return [x for x in lst if x != target]
```

### 12. Second largest number

```python
def second_largest(lst):
    return sorted(set(lst))[-2]
```

### 13. Count element frequencies

```python
def count_occurrences(lst):
    from collections import Counter
    return dict(Counter(lst))
```

### 14. Reverse list in-place

```python
def reverse_list(lst):
    for i in range(len(lst)//2):
        lst[i], lst[-1-i] = lst[-1-i], lst[i]
    return lst
```

### 15. Remove duplicates (preserve order)

```python
def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result
```

### 16. Check if list is sorted

```python
def is_sorted(lst):
    return lst == sorted(lst) or lst == sorted(lst, reverse=True)
```

### 17. Merge two sorted lists

```python
def merge_sorted(l1, l2):
    return sorted(l1 + l2)
```

### 18. Find intersection of lists

```python
def list_intersection(a, b):
    return list(set(a) & set(b))
```

### 19. Find union without duplicates

```python
def list_union(a, b):
    return list(set(a) | set(b))
```

### 20. Shuffle list (no `shuffle()`)

```python
import random
def shuffle_list(lst):
    for i in range(len(lst)-1, 0, -1):
        j = random.randint(0, i)
        lst[i], lst[j] = lst[j], lst[i]
    return lst
```

---

## **Tuple Problems**

### 21. Common elements in two tuples

```python
def common_elements(t1, t2):
    return tuple(set(t1) & set(t2))
```

### 22. Prompt for two sets and find intersection

```python
def input_and_intersect():
    a = set(map(int, input("Enter set 1 (comma-separated): ").split(',')))
    b = set(map(int, input("Enter set 2 (comma-separated): ").split(',')))
    print("Intersection:", a & b)
```

### 23. Concatenate two tuples

```python
def concat_tuples(t1, t2):
    return t1 + t2
```

### 24. Set difference (strings)

```python
def set_difference(s1, s2):
    return s1 - s2
```

### 25. Slice tuple by indices

```python
def slice_tuple(t, start, end):
    return t[start:end]
```

### 26. Union of two sets (characters)

```python
def union_sets(s1, s2):
    return s1 | s2
```

### 27. Max and Min from tuple (tuple unpacking)

```python
def max_min(t):
    return max(t), min(t)
```

### 28. Set operations: union, intersection, difference

```python
def set_operations(a, b):
    return a | b, a & b, a - b
```

### 29. Count an element in tuple

```python
def count_element(t, elem):
    return t.count(elem)
```

---

## **Set and Dictionary Problems**

### 30. Symmetric difference of two sets

```python
def symmetric_diff(a, b):
    return a ^ b
```

### 31. Word frequency in list

```python
def word_freq(words):
    from collections import Counter
    return dict(Counter(words))
```

### 32. Merge two dicts and sum common keys

```python
def merge_dicts(d1, d2):
    result = d1.copy()
    for k, v in d2.items():
        result[k] = result.get(k, 0) + v
    return result
```

### 33. Access value in nested dict

```python
def access_nested(d, keys):
    for key in keys:
        if isinstance(d, dict) and key in d:
            d = d[key]
        else:
            return None
    return d
```

### 34. Sort dictionary by values

```python
def sort_dict_by_value(d, descending=False):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=descending))
```

### 35. Invert a dictionary

```python
def invert_dict(d):
    inverted = {}
    for k, v in d.items():
        if v in inverted:
            inverted[v].append(k)
        else:
            inverted[v] = [k]
    return inverted
```
"""