# -*- coding: utf-8 -*-
"""pythondatastructures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QA-tHm5WHExL2_MckIvJDNRofPISAppx

### 1. **What are data structures, and why are they important?**

Data structures are ways of organizing and storing data so that it can be accessed and modified efficiently. They're important for writing efficient algorithms, managing memory, and solving problems effectively.

**Example:**
A list stores ordered elements; a dictionary maps keys to values.

---

### 2. **Difference between mutable and immutable data types:**

* **Mutable:** Can be changed after creation (e.g., `list`, `dict`, `set`)
* **Immutable:** Cannot be changed (e.g., `int`, `float`, `str`, `tuple`)

**Example:**

```python
x = [1, 2, 3]  # mutable
x[0] = 99  

y = (1, 2, 3)  # immutable
# y[0] = 99  # ❌ This will raise an error
```

---

### 3. **Difference between lists and tuples:**

* **Lists:** Mutable, use more memory, slower for iteration.
* **Tuples:** Immutable, use less memory, faster, can be used as dictionary keys.

---

### 4. **How dictionaries store data:**

Dictionaries store data as key-value pairs using a hash table internally. Keys must be unique and hashable.

**Example:**

```python
data = {"name": "Alice", "age": 25}
```

---

### 5. **Why use a set instead of a list?**

Sets store **unique** elements and provide faster **membership checks** due to their hash-based implementation.

**Example:**

```python
s = {1, 2, 3}
print(2 in s)  # Fast lookup
```

---

### 6. **What is a string and how is it different from a list?**

A **string** is an immutable sequence of characters. A **list** is mutable and can hold various data types.

**Example:**

```python
s = "hello"  # immutable
l = ['h', 'e', 'l', 'l', 'o']  # mutable
```

---

### 7. **How do tuples ensure data integrity?**

Because tuples are immutable, their content cannot be changed after creation, making them reliable for storing constant data.

---

### 8. **What is a hash table and how does it relate to dictionaries?**

A hash table is a data structure that maps keys to values using a hash function. Python's `dict` is implemented using a hash table for fast lookups.

---

### 9. **Can lists contain different data types?**

Yes, lists in Python can contain elements of any type.

**Example:**

```python
mixed = [1, "hello", 3.14, True]
```

---

### 10. **Why are strings immutable?**

Strings are immutable to improve performance and ensure safety when shared between parts of a program.

---

### 11. **Advantages of dictionaries over lists:**

* **Faster lookups** using keys.
* **More readable and self-documenting** when using meaningful keys.

**Example:**

```python
# With list:
person = ["Alice", 25]
# With dict:
person = {"name": "Alice", "age": 25}
```

---

### 12. **When is a tuple preferable over a list?**

* When data shouldn't change
* As dictionary keys
* For better performance in fixed collections

---

### 13. **How do sets handle duplicate values?**

Sets **automatically remove duplicates**.

**Example:**

```python
s = {1, 2, 2, 3}
print(s)  # Output: {1, 2, 3}
```

---

### 14. **How does `in` work differently in lists and dictionaries?**

* **List:** Checks if value exists
* **Dict:** Checks if **key** exists

**Example:**

```python
[1, 2, 3] → 2 in list ✔  
{"a": 1} → "a" in dict ✔ but 1 in dict ✘
```

---

### 15. **Can you modify elements of a tuple? Why not?**

No. Tuples are **immutable**, so their content cannot be altered after creation.

---

### 16. **What is a nested dictionary? Use case?**

A dictionary inside another dictionary.

**Example:**

```python
students = {
    "Alice": {"math": 85, "science": 90},
    "Bob": {"math": 78, "science": 88}
}
```

Use case: Storing structured data like records, JSON-like formats.

---

### 17. **Time complexity of accessing elements in a dictionary:**

* **Average case:** O(1)
* **Worst case:** O(n) (rare, in case of hash collisions)

---

### 18. **When are lists preferred over dictionaries?**

* When **order matters**
* When **indexing** by position
* For small datasets without key-based access

---

### 19. **Why are dictionaries unordered (before Python 3.7)?**

They used hash tables without preserving insertion order. From **Python 3.7**, insertion order is maintained, but it's not meant for ordering operations.

---

### 20. **Difference between a list and a dictionary in data retrieval:**

* **List:** Access by index (position)
* **Dictionary:** Access by key (label)

**Example:**

```python
my_list = [10, 20] → my_list[0]  
my_dict = {"a": 10} → my_dict["a"]
```

---

### **Strings:**

1. **Create a string with your name and print it**

```python
name = "John Doe"
print(name)
```

2. **Find the length of the string "Hello World"**

```python
s = "Hello World"
print(len(s))
```

3. **Slice the first 3 characters from "Python Programming"**

```python
text = "Python Programming"
print(text[:3])
```

4. **Convert "hello" to uppercase**

```python
s = "hello"
print(s.upper())
```

5. **Replace "apple" with "orange" in "I like apple"**

```python
s = "I like apple"
print(s.replace("apple", "orange"))
```

---

### **Lists:**

6. **Create a list with numbers 1 to 5 and print it**

```python
lst = [1, 2, 3, 4, 5]
print(lst)
```

7. **Append 10 to the list \[1, 2, 3, 4]**

```python
lst = [1, 2, 3, 4]
lst.append(10)
print(lst)
```

8. **Remove number 3 from the list \[1, 2, 3, 4, 5]**

```python
lst = [1, 2, 3, 4, 5]
lst.remove(3)
print(lst)
```

9. **Access second element in \['a', 'b', 'c', 'd']**

```python
lst = ['a', 'b', 'c', 'd']
print(lst[1])
```

10. **Reverse the list \[10, 20, 30, 40, 50]**

```python
lst = [10, 20, 30, 40, 50]
lst.reverse()
print(lst)
```

---

### **Tuples:**

11. **Create a tuple with 100, 200, 300 and print it**

```python
tup = (100, 200, 300)
print(tup)
```

12. **Access second-to-last element in ('red', 'green', 'blue', 'yellow')**

```python
colors = ('red', 'green', 'blue', 'yellow')
print(colors[-2])
```

13. **Find minimum in (10, 20, 5, 15)**

```python
nums = (10, 20, 5, 15)
print(min(nums))
```

14. **Find index of "cat" in ('dog', 'cat', 'rabbit')**

```python
animals = ('dog', 'cat', 'rabbit')
print(animals.index("cat"))
```

15. **Check if "kiwi" is in a fruit tuple**

```python
fruits = ("apple", "banana", "mango")
print("kiwi" in fruits)
```

---

### **Sets:**

16. **Create set with 'a', 'b', 'c' and print it**

```python
s = {'a', 'b', 'c'}
print(s)
```

17. **Clear all elements from {1, 2, 3, 4, 5}**

```python
s = {1, 2, 3, 4, 5}
s.clear()
print(s)
```

18. **Remove 4 from {1, 2, 3, 4}**

```python
s = {1, 2, 3, 4}
s.remove(4)
print(s)
```

19. **Find union of {1, 2, 3} and {3, 4, 5}**

```python
a = {1, 2, 3}
b = {3, 4, 5}
print(a.union(b))
```

20. **Find intersection of {1, 2, 3} and {2, 3, 4}**

```python
a = {1, 2, 3}
b = {2, 3, 4}
print(a.intersection(b))
```

---

### **Dictionaries:**

21. **Create dictionary with keys "name", "age", "city"**

```python
person = {"name": "John", "age": 25, "city": "New York"}
print(person)
```

22. **Add key "country": "USA"**

```python
person = {'name': 'John', 'age': 25}
person["country"] = "USA"
print(person)
```

23. **Access value of "name" in {'name': 'Alice', 'age': 30}**

```python
d = {'name': 'Alice', 'age': 30}
print(d["name"])
```

24. **Remove "age" from {'name': 'Bob', 'age': 22, 'city': 'New York'}**

```python
d = {'name': 'Bob', 'age': 22, 'city': 'New York'}
del d["age"]
print(d)
```

25. **Check if "city" exists in {'name': 'Alice', 'city': 'Paris'}**

```python
d = {'name': 'Alice', 'city': 'Paris'}
print("city" in d)
```

---

### **Mixed Tasks:**

26. **Create and print a list, tuple, and dictionary**

```python
lst = [1, 2, 3]
tup = (4, 5, 6)
dct = {"a": 1, "b": 2}
print(lst, tup, dct)
```

27. **List of 5 random numbers, sort and print**

```python
import random
nums = [random.randint(1, 100) for _ in range(5)]
nums.sort()
print(nums)
```

28. **Create list with strings and print 3rd index**

```python
lst = ["apple", "banana", "cherry", "date", "fig"]
print(lst[3])
```

29. **Combine two dictionaries and print**

```python
a = {"x": 1, "y": 2}
b = {"y": 3, "z": 4}
combined = {**a, **b}
print(combined)
```

30. **Convert list of strings into a set**

```python
words = ["apple", "banana", "apple", "cherry"]
unique = set(words)
print(unique)
"""