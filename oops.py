# -*- coding: utf-8 -*-
"""OOPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZR2GriRX7trDWK3B-g9o-qDK7McDMUqX
"""



"""

### 1. **Five Key Concepts of Object-Oriented Programming (OOP)**

1. **Class** – Blueprint for creating objects.
2. **Object** – Instance of a class.
3. **Encapsulation** – Hiding internal state and requiring interaction through methods.
4. **Inheritance** – Mechanism to create a new class from an existing class.
5. **Polymorphism** – Ability to use a common interface for different data types.

---

### 2. **Python Class for a Car**

```python
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def display_info(self):
        print(f"{self.year} {self.make} {self.model}")
```

---

### 3. **Instance vs Class Methods**

* **Instance Method:** Works with object’s data.
* **Class Method:** Works with class-level data.

```python
class MyClass:
    count = 0

    def __init__(self):
        MyClass.count += 1

    def instance_method(self):
        return f"Called from {self}"

    @classmethod
    def class_method(cls):
        return f"{cls.count} instances created"
```

---

### 4. **Method Overloading in Python**

Python does not support traditional method overloading. It can be simulated with default arguments.

```python
class Calculator:
    def add(self, a, b=0, c=0):
        return a + b + c

calc = Calculator()
print(calc.add(2))        # 2
print(calc.add(2, 3))     # 5
print(calc.add(2, 3, 4))  # 9
```

---

### 5. **Access Modifiers in Python**

| Modifier  | Syntax Example | Meaning                  |
| --------- | -------------- | ------------------------ |
| Public    | `self.name`    | Accessible from anywhere |
| Protected | `self._name`   | Conventionally protected |
| Private   | `self.__name`  | Name mangled, private    |

---

### 6. **Types of Inheritance**

1. **Single Inheritance**
2. **Multiple Inheritance**
3. **Multilevel Inheritance**
4. **Hierarchical Inheritance**
5. **Hybrid Inheritance**

**Multiple Inheritance Example:**

```python
class A:
    def show(self):
        print("A")

class B:
    def display(self):
        print("B")

class C(A, B):
    pass

obj = C()
obj.show()
obj.display()
```

---

### 7. **Method Resolution Order (MRO)**

* Defines the order in which base classes are searched.
* Use `classname.__mro__` or `help(classname)`.

```python
class A: pass
class B(A): pass
class C(B): pass

print(C.__mro__)
```

---

### 8. **Abstract Base Class**

```python
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width
```

---

### 9. **Polymorphism Example**

```python
def print_area(shape):
    print(f"Area: {shape.area()}")

c = Circle(5)
r = Rectangle(4, 6)

print_area(c)
print_area(r)
```

---

### 10. **Encapsulation: BankAccount Class**

```python
class BankAccount:
    def __init__(self, account_number, balance=0):
        self.__account_number = account_number
        self.__balance = balance

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount <= self.__balance:
            self.__balance -= amount

    def get_balance(self):
        return self.__balance
```

---

### 11. **Override `__str__` and `__add__`**

```python
class Number:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return f"Number({self.value})"

    def __add__(self, other):
        return Number(self.value + other.value)

a = Number(10)
b = Number(5)
print(a + b)  # Calls __add__
```

---

### 12. **Decorator to Measure Execution Time**

```python
import time

def timer(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"Execution time: {end - start:.4f} seconds")
        return result
    return wrapper

@timer
def example_function():
    time.sleep(1)

example_function()
```

---

### 13. **Diamond Problem & Python Resolution**

Occurs in multiple inheritance when two parent classes inherit from the same base class.

```python
class A: pass
class B(A): pass
class C(A): pass
class D(B, C): pass
```

* **MRO resolves it left to right (C3 Linearization)**.
* Use `D.__mro__` to see the order.

---

### 14. **Class Method to Count Instances**

```python
class Tracker:
    count = 0

    def __init__(self):
        Tracker.increment()

    @classmethod
    def increment(cls):
        cls.count += 1

    @classmethod
    def get_count(cls):
        return cls.count
```

---

### 15. **Static Method to Check Leap Year**

```python
class DateUtils:
    @staticmethod
    def is_leap_year(year):
        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

print(DateUtils.is_leap_year(2024))  # True
```

"""